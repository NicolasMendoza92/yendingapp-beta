generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

type Creator {
  email   String
  user_id String
  name    String
  photo   String
}

type PreviasJoinRequests {
  id         String   @map("_id") @db.ObjectId
  attendants Int
  intentions String
  photos     String[]
  status     String
  user_id    String
}

model previas {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  v                 Int?                  @map("__v")
  createdAt         DateTime?             @db.Date
  creator           Creator?
  date              DateTime              @db.Date
  description       String
  images_previa_url String[]
  join_requests     PreviasJoinRequests[]
  location          String
  lat               String?
  lng               String?
  participants      String?
  pass_code         String                @unique(map: "pass_code_1")
  place_details     String
  previa_id         String                @unique(map: "previa_id_1")
  show_location     Boolean
  startTime         String?
  updatedAt         DateTime?             @db.Date
}

model previausers {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  attendants Int
  createdAt  DateTime @default(now()) @db.Date
  intentions String
  photos     String[]
  previa_id  String
  status     String
  updatedAt  DateTime @updatedAt @db.Date
  user_id    String   @unique @map("user_id")
}

model users {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  v                Int?       @map("__v")
  about            String?
  age              Int?
  createdAt        DateTime?  @db.Date
  dob_day          String?
  dob_month        String?
  dob_year         String?
  email            String     @unique(map: "email_1")
  emailVerified    DateTime?
  gender_identity  String?
  image            String?
  name             String?
  password         String?
  previas_created  String[]
  previas_interest String?
  previas_requests String[]
  show_interest    Boolean?
  updatedAt        DateTime   @updatedAt
  url_img          String?
  user_id          String     @unique(map: "user_id_1")
  accounts         accounts[]
  sessions         sessions[]
}

model accounts {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model sessions {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  user         users    @relation(fields: [usersId], references: [id])
  usersId      String   @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
